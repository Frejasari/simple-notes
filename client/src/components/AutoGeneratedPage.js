import React, { Component } from "react";
import Paragraph from "./Paragraph";
import api from "../api";
import "./Page.css";

class AutoGeneratedPage extends Component {
  constructor(props) {
    super(props);
    !api.isLoggedIn() && this.props.history.push("/login");
    this.state = {
      paragraphs: null,
      category: null,
      currentFocus: null,
      isAltPressed: false
    };
    //#region bind methods to this class
    this.deleteParagraph = this.deleteParagraph.bind(this);
    this.setFocus = this.setFocus.bind(this);
    this.handleFocusChange = this.handleFocusChange.bind(this);
    this.handleAltPress = this.handleAltPress.bind(this);
    this.handleParagraphUpdate = this.handleParagraphUpdate.bind(this);
    this.getParagraphsFromApi = this.getParagraphsFromApi.bind(this);
    //#endregion
  }
  handleParagraphUpdate(paragraphId, newParagraphs) {
    api.editParagraph(paragraphId, { _categories: newParagraphs }).then(res => {
      this.getParagraphsFromApi();
    });
  }
  //#region handle focus changes of paragraphs when creating/ deleting or switching between them
  handleAltPress(isPressed) {
    if (isPressed !== this.state.isAltPressed)
      this.setState(prevState => ({
        isAltPressed: !prevState.isAltPressed
      }));
  }
  createNewParagraph(position) {}
  deleteParagraph(paragraphId) {}

  handleFocusChange(direction) {
    this.setState(prevState => {
      const paragraphArr = prevState.page._paragraphs;
      const indexOfCurrFocusParagraph = paragraphArr.findIndex(p => p._id === prevState.currentFocus);
      let newParagraph = null;
      if (direction === "up")
        newParagraph = paragraphArr[indexOfCurrFocusParagraph > 0 ? indexOfCurrFocusParagraph - 1 : 0];
      if (direction === "down")
        newParagraph =
          paragraphArr[
            indexOfCurrFocusParagraph < paragraphArr.length - 1
              ? indexOfCurrFocusParagraph + 1
              : paragraphArr.length - 1
          ];
      return { currentFocus: newParagraph._id };
    });
  }
  setFocus(id) {
    if (this.state.currentFocus !== id) this.setState({ currentFocus: id });
  }
  //#endregion

  //#region lifecycle
  getParagraphsFromApi() {
    api.getParagraphsFromCategory(this.props.match.params.categoryId).then(res => {
      console.log("PARAGRAPHS RECEIVED", res);
      this.setState({ paragraphs: res.paragraphs, category: res.category, currentFocus: res.paragraphs[0]._id });
    });
  }

  componentDidMount() {
    this.getParagraphsFromApi();
  }
  render() {
    const paragraphs = this.state.paragraphs;
    if (!paragraphs) return <div>loading....</div>;

    return (
      <div className="Notebooks">
        <h2>{this.state.category.name}</h2>
        <p className="autogenerated-page-info">
          Autogenerated page: you can change the content but be careful: this will change the content of the paragraph
          everywhere. You cannot add or delete whole paragraphs.
        </p>
        <div className="page autogenerated-page">
          {this.state.paragraphs.map((p, i) => (
            <Paragraph
              key={p._id}
              paragraph={p}
              index={i}
              isAltPressed={this.state.isAltPressed}
              isCurrentFocus={this.state.currentFocus === p._id}
              createNewParagraph={_ => this.createNewParagraph(i + 1)}
              deleteParagraph={this.deleteParagraph}
              handleFocusGain={this.setFocus}
              handleFocusChange={this.handleFocusChange}
              handleAltPress={this.handleAltPress}
              handleParagraphUpdate={this.handleParagraphUpdate}
            />
          ))}
        </div>
      </div>
    );
  }
  //#endregion
}

export default AutoGeneratedPage;
